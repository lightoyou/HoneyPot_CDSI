input {
  file {
    path => "/var/log/kippo/kippo.log"
    type => "kippo"
  }
  file {
    path => "/var/log/elk-import/dionaea-single.log"
    type => "dionaea"
  }
  sqlite {
    path => "/var/lib/dionaea/logsql.sqlite"
    exclude_tables => [ 'auth_group','logins','auth_group_permissions','mssql_commands','auth_permission','mssql_fingerprints','auth_user','mysql_command_args','auth_user_groups','mysql_command_ops','auth_user_user_permissions','mysql_commands','offers','dcerpcbinds','p0fs','dcerpcrequests','resolves','dcerpcserviceops','since_table','dcerpcservices','sip_addrs','django_content_type','sip_commands','django_migrations','sip_sdp_connectiondatas','django_session','sip_sdp_medias','django_site','sip_sdp_origins','downloads','sip_vias','emu_profiles','virustotals','emu_services','virustotalscans','emu_services_old']
    type => "dionaea22222"
  }
  file {
    path => "/var/log/elk-import/glastopf-single.log"
    type => "glastopf"
  }
  file {
    path => "/var/log/elk-import/conpot-single.log"
    type => "conpot"
  }
  file {
    path => "/var/log/named/query.log"
    type => "dnshpot"
  }
  file {
    path => "/var/log/ulog/syslogemu.log"
    type => "iptables"
  }    
}

filter {

############################################################
# Kippo honeypot
#
  if [type] == "kippo" {

    if (  [message] =~ "connection lost" or 
          [message] =~ "\[HoneyPotTransport" or 
          [message] =~ "failed auth password" or 
          [message] =~ "unauthorized login" or 
          [message] =~ "\treason: " or
          [message] =~ "\[SSHChannel session" or
          [message] =~ "\[SSHService ssh-connection" or
          [message] =~ "\] starting service ssh-connection" or
          [message] =~ "\[-\] ") {
      drop {}
    }
    else if ( [message] =~ "\[SSHService ssh-userauth on HoneyPotTransport" and [message] =~ " login attempt ") {
      grok { 
        match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE} \[SSHService ssh-userauth on HoneyPotTransport,%{DATA:kippo-session},%{IP:srcip}\] login attempt \[%{DATA:kippo-username}/%{DATA:kippo-password}\]" ]
      } 
      mutate {
        add_field => [ "kippo-type", "credentials" ]
        strip => [ "kippo-session", "srcip" ]
      }
    }
    else if ( [message] =~ "\[SSHService ssh-userauth on HoneyPotTransport" and [message] =~ " trying auth ") {
      grok { 
        match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE} \[SSHService ssh-userauth on HoneyPotTransport,%{DATA:kippo-session},%{IP:srcip}\] %{DATA:kippo-username} trying auth %{WORD:kippo-authmethod}" ]
      } 
      mutate {
        add_field => [ "kippo-type", "authentication-method" ]
        strip => [ "kippo-session", "srcip", "kippo-authmethod" ]        
      }
    }    
    else if ( [message] =~ "\[kippo.core.ssh.HoneyPotSSHFactory\] New connection:") {
      grok { 
        match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE} \[kippo.core.ssh.HoneyPotSSHFactory\] New connection: %{IP:srcip}:%{DATA:srcport} \(%{IP:dstip}:%{DATA:dstport}\) \[session: %{DATA:kippo-session}\]" ]
      } 
      mutate {
        add_field => [ "kippo-type", "connection" ]
        strip => [ "kippo-session", "srcip", "dstip", "srcport", "dstport" ]
      }
    }

    mutate {
      add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}" ]
    }
    date {
        match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
    }
  }
 
############################################################
# Dionaea honeypot
#
  if [type] == "dionaea22222" {
   mutate {
        add_field => [ "dstip", "%{local_host}" ]
        add_field => [ "srcip", "%{remote_host}" ]
        add_field => [ "dstport", "%{local_port}" ]
        add_field => [ "srcport", "%{remote_port}" ]
        convert => [ "dstport", "integer" ]
        convert => [ "srcport", "integer" ]
   }
  }

  if [type] == "dionaea" {
    grok {
       match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} : %{DATA:connection_type} \t %{DATA:connection_protocol}\t%{DATA:protocol}\t %{IP:srcip} \t%{DATA:srcport} \t %{IP:dstip} \t %{DATA:dstport} \t %{DATA:hostname}" ]
    }
    mutate {
      strip => [ "connection_protocol", "connection_type", "protocol", "srcport" , "dstport", "hostname" ]
    }
    mutate {
      add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}" ]
    }
    date {
      match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
    }
  }

############################################################
# Glastopf honeypot
#
  if [type] == "glastopf" {
    grok {
      match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} : %{IP:srcip} \t%{DATA:srcport} \t %{IP:dstip} \t %{DATA:dstport} \t %{DATA:protocol} \t %{DATA:request_url} \t %{DATA:pattern} \t %{DATA:filename} \t %{DATA:request_method} \t '%{DATA:request_raw}' " ]
    }
    mutate {
      strip => [ "srcip", "dstip", "protocol", "srcport" , "dstport", "pattern", "filename", "request_url" ]
    }
    mutate {
      add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}" ]
    }
    date {
      match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
    }
  }

############################################################
# Conpot honeypot
#
  if [type] == "conpot" {
    grok {
       match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time} : %{IP:srcip} \t%{DATA:srcport} \t %{IP:dstip} \t %{DATA:request_protocol} \t %{DATA:response_code} \t %{DATA:sensor_id} \t '%{DATA:request_raw}' " ]
    }
    mutate {
      strip => [ "srcip", "dstip", "request_protocol", "srcport" , "response_code", "sensor_id" ]
    }
    mutate {
      add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}" ]
    }
    date {
      match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
    }
  }


############################################################
# DNS honeypot
#
  if [type] == "dnshpot" {
    grok {
       match => [ "message", "%{MONTHDAY:day}-%{MONTH:month}-%{YEAR:year} %{TIME:time} queries: info: client %{IP:srcip}#%{DATA:srcport}%{SPACE}\(%{DATA:hostname}\): query: %{DATA:hostname2} %{DATA:querytype3} %{DATA:querytype} %{DATA:querytype2} \(%{IP:dstip}\)" ]
    }
    mutate {
      add_field => [ "dstport", "53" ]
    }
    mutate {
      strip => [ "srcip", "dstip", "hostname", "srcport" , "hostname2", "querytype", "querytype2" ]
    }
    mutate {
      add_field => [ "timestamp", "%{day}-%{month}-%{year} %{time}" ]
    }
    date {
      match => [ "timestamp", "dd-MMM-YYYY HH:mm:ss.SSS" ]
    }
  }

############################################################
# IPtables / network tracking
#
  if [type] == "iptables" {
    grok {
       match => [ "message", "%{MONTH:month} %{MONTHDAY:day} %{TIME:time} %{HOSTNAME:hostname}  IN=%{WORD:incoming_interface} OUT= MAC=(?<mac_addr>\S+) SRC=%{IP:srcip} DST=%{IP:dstip} LEN=%{DATA:len} TOS=%{DATA:tos} PREC=%{DATA:prec} TTL=%{DATA:ttl} ID=%{DATA:id}(?:\sDF)? PROTO=%{DATA:protocol} SPT=%{DATA:srcport} DPT=%{DATA:dstport} %{DATA:remainder}"]
    }
    mutate {
      strip => [ "srcip", "dstip", "hostname", "srcport" , "dstport" ]
    }
     mutate {
      add_field => [ "timestamp", "%{month}-%{day} %{time}" ]
    }
    date {
      match => [ "timestamp", "MMM-dd HH:mm:ss" ]
    }
  }  
  
############################################################
# Filters to apply on all honeypot data
#
  if ( [type] == "glastopf" or [type] == "dionaea22222" or [type] == "dionaea" or [type] == "conpot" or [type] == "kippo" or [type] == "dnshpot" or [type] == "iptables" ) {
    mutate {
      add_field => [ "basetype", "honeypot" ]
    }
    geoip {
      source => "srcip"
      target => "geoip"
      database =>"/var/www/db/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
    geoip {
      source => "srcip"
      target => "geoip"
      database =>"/var/www/db/GeoIPASNum.dat"
      add_field => [ "[geoip][full]", "%{[geoip][number]} %{[geoip][asn]}" ]
    }
  }
}

output {
  elasticsearch {
    host => localhost
  }
  stdout { codec => rubydebug }
}
