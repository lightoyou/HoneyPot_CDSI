input {
  #Modbus
  tcp {
    port => 5959
    codec => json
  }
  #apache
  file {
    path => ["/data/apache/access.log"]
    type => "apache_access"
  }
  file {
    path => ["/data/apache/error.log"]
    type => "apache_error"
  }
  file {
    path => ["/data/ssh_kippo/kippo.log"]
    type => "kippo"
  }
}
filter {
   if [type] in [ "apache" , "apache_access" , "apache-access" ]  {
      grok {
         match => [
         "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}",
         "message" , "%{COMMONAPACHELOG}+%{GREEDYDATA:extra_fields}"
         ]
         overwrite => [ "message" ]
      }
      mutate {
         convert => ["response", "integer"]
         convert => ["bytes", "integer"]
         convert => ["responsetime", "float"]
      }
      geoip {
         source => "clientip"
         target => "geoip"
         add_tag => [ "apache-geoip" ]
      }
      date {
         match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
         remove_field => [ "timestamp" ]
      }
      useragent {
         source => "agent"
      }
   }
   if [type] in ["apache_error","apache-error"] {
      grok {
         match => ["message", "\[%{WORD:dayname} %{WORD:month} %{DATA:day} %{DATA:hour}:%{DATA:minute}:%{DATA:second} %{YEAR:year}\] \[%{NOTSPACE:loglevel}\] (?:\[client %{IPORHOST:clientip}\] ){0,1}%{GREEDYDATA:message}"]
         overwrite => [ "message" ]
      }
      mutate
      {
         add_field =>
         {
            "time_stamp" => "%{day}/%{month}/%{year}:%{hour}:%{minute}:%{second}"
         }
      }
      date {
         match => ["time_stamp", "dd/MMM/YYYY:HH:mm:ss"]
         remove_field => [ "time_stamp","day","dayname","month","hour","minute","second","year"]
      }
   }
#SSH
if [type] == "kippo" {
   if (  [message] =~ "connection lost" or
         [message] =~ "\[HoneyPotTransport" or
         [message] =~ "failed auth password" or
         [message] =~ "unauthorized login" or
         [message] =~ "\treason: " or
         [message] =~ "\[SSHChannel session" or
         [message] =~ "\[SSHService ssh-connection" or
         [message] =~ "\] starting service ssh-connection" or
         [message] =~ "\[-\] ") {
     drop {}
   }
   else if ( [message] =~ "\[SSHService ssh-userauth on HoneyPotTransport" and [message] =~ " login attempt ") {
     grok {
       match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE} \[SSHService ssh-userauth on HoneyPotTransport,%{DATA:kippo-session},%{IP:srcip}\] login attempt \[%{DATA:kippo-username}/%{DATA:kippo-password}\]" ]
     }
     mutate {
       add_field => [ "kippo-type", "credentials" ]
       strip => [ "kippo-session", "srcip" ]
     }
   }
   else if ( [message] =~ "\[SSHService ssh-userauth on HoneyPotTransport" and [message] =~ " trying auth ") {
     grok {
       match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE} \[SSHService ssh-userauth on HoneyPotTransport,%{DATA:kippo-session},%{IP:srcip}\] %{DATA:kippo-username} trying auth %{WORD:kippo-authmethod}" ]
     }
     mutate {
       add_field => [ "kippo-type", "authentication-method" ]
       strip => [ "kippo-session", "srcip", "kippo-authmethod" ]
     }
   }
   else if ( [message] =~ "\[kippo.core.ssh.HoneyPotSSHFactory\] New connection:") {
     grok {
       match => [ "message", "%{YEAR:year}-%{MONTHNUM:month}-%{MONTHDAY:day} %{TIME:time}%{ISO8601_TIMEZONE} \[kippo.core.ssh.HoneyPotSSHFactory\] New connection: %{IP:srcip}:%{DATA:srcport} \(%{IP:dstip}:%{DATA:dstport}\) \[session: %{DATA:kippo-session}\]" ]
     }
     mutate {
       add_field => [ "kippo-type", "connection" ]
       strip => [ "kippo-session", "srcip", "dstip", "srcport", "dstport" ]
     }
   }
   mutate {
     add_field => [ "timestamp", "%{year}-%{month}-%{day} %{time}" ]
   }
   date {
       match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
   }
 }

}
output {
 elasticsearch {
   hosts => ["elasticsearch:9200"]
   index => "apache-%{+YYYY.MM.dd}"
   document_type => "system_logs"
 }
 stdout { codec => rubydebug }
}
